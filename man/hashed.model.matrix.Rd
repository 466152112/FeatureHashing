% Generated by roxygen2 (4.0.1): do not edit by hand
\name{hashed.model.matrix}
\alias{hash_h}
\alias{hash_xi}
\alias{hashed.model.matrix}
\title{Create a Model Matrix with Feature Hashing}
\usage{
hashed.model.matrix(object, data, hash_size = 2^24, transpose = TRUE,
  keep.hashing_mapping = FALSE)
}
\arguments{
\item{object}{formula. A model formula.}

\item{data}{data.frame. The original data.}

\item{hash_size}{positive integer. The hash size of feature hashing.}

\item{transpose}{logical value. Indicating if the transpose should be returned.}

\item{keep.hashing_mapping}{logical value.
The indicator of whether store the hash mapping.}
}
\description{
Create a Model Matrix with Feature Hashing
}
\details{
The \code{hashed.model.matrix} hashes the feature automatically during
the construction of the model matrix. It uses the 32-bit variant of MurmurHash3
\url{https://code.google.com/p/smhasher/wiki/MurmurHash3}. Weinberger
et. al. (2009) used two seperate hashing function \eqn{h}(\code{hash_h}) and
\eqn{\xi}(\code{hash_xi}) to determine the index and the sign of a feature,
respectively. Different seed is used to implement the hashing function
\eqn{h} and \eqn{\xi} with MurmurHash3.
}
\examples{
# Construct the model matrix. The transposed matrix is returned by default.
m <- hashed.model.matrix(~ ., CO2, 8, keep.hashing_mapping = TRUE)
# Print the matrix via dgCMatrix
as(m, "dgCMatrix")
# Check the result of hashing
ls(attr(m, "mapping"))
# The row of "conc" is collided with the intercept if the hash size is 8
attr(m, "mapping")[["conc"]] \%\% 8
# The result is CSCMatrix which supports simple subsetting and matrix-vector
# multiplication
}
\references{
Kilian Q. Weinberger, Anirban Dasgupta, John Langford,
Alexander J. Smola, and Josh Attenberg. ICML, volume 382 of ACM
International Conference Proceeding Series, page 140. ACM, (2009)
}

